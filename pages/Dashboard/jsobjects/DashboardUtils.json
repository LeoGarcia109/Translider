{
  "unpublishedCollection": {
    "name": "DashboardUtils",
    "pageId": "Dashboard",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\t// Calcula métricas do dashboard\n\tcalculateMetrics: () => {\n\t\tconst data = GetReceitas.data || [];\n\t\tconst currentMonth = moment().month();\n\t\tconst lastMonth = moment().subtract(1, 'month').month();\n\t\t\n\t\t// Receita total\n\t\tconst totalRevenue = data.reduce((sum, item) => sum + (item.valor || 0), 0);\n\t\t\n\t\t// Receita do mês atual\n\t\tconst currentMonthRevenue = data\n\t\t\t.filter(item => moment(item.data).month() === currentMonth)\n\t\t\t.reduce((sum, item) => sum + (item.valor || 0), 0);\n\t\t\n\t\t// Receita do mês passado\n\t\tconst lastMonthRevenue = data\n\t\t\t.filter(item => moment(item.data).month() === lastMonth)\n\t\t\t.reduce((sum, item) => sum + (item.valor || 0), 0);\n\t\t\n\t\t// Crescimento percentual\n\t\tconst growth = lastMonthRevenue > 0 \n\t\t\t? ((currentMonthRevenue - lastMonthRevenue) / lastMonthRevenue * 100).toFixed(1)\n\t\t\t: 0;\n\t\t\n\t\treturn {\n\t\t\ttotalRevenue,\n\t\t\tcurrentMonthRevenue,\n\t\t\tlastMonthRevenue,\n\t\t\tgrowth: growth > 0 ? `+${growth}%` : `${growth}%`,\n\t\t\tgrowthPositive: growth > 0\n\t\t};\n\t},\n\t\n\t// Formata valores monetários\n\tformatCurrency: (value) => {\n\t\treturn new Intl.NumberFormat('pt-BR', {\n\t\t\tstyle: 'currency',\n\t\t\tcurrency: 'BRL',\n\t\t\tminimumFractionDigits: 2\n\t\t}).format(value || 0);\n\t},\n\t\n\t// Prepara dados para o gráfico\n\tprepareChartData: () => {\n\t\tconst data = GetReceitas.data || [];\n\t\tconst grouped = {};\n\t\t\n\t\t// Agrupa por mês\n\t\tdata.forEach(item => {\n\t\t\tconst month = moment(item.data).format('MMM/YY');\n\t\t\tgrouped[month] = (grouped[month] || 0) + (item.valor || 0);\n\t\t});\n\t\t\n\t\t// Converte para formato do gráfico\n\t\tconst labels = Object.keys(grouped).sort((a, b) => \n\t\t\tmoment(a, 'MMM/YY').valueOf() - moment(b, 'MMM/YY').valueOf()\n\t\t);\n\t\t\n\t\tconst values = labels.map(label => grouped[label]);\n\t\t\n\t\treturn {\n\t\t\tlabels,\n\t\t\tdatasets: [{\n\t\t\t\tlabel: 'Receitas Mensais',\n\t\t\t\tdata: values,\n\t\t\t\tborderColor: '#8B5CF6',\n\t\t\t\tbackgroundColor: 'rgba(139, 92, 246, 0.1)',\n\t\t\t\ttension: 0.4,\n\t\t\t\tfill: true\n\t\t\t}]\n\t\t};\n\t},\n\t\n\t// Filtra dados da tabela\n\tfilterTableData: () => {\n\t\tlet data = GetReceitas.data || [];\n\t\tconst searchTerm = SearchInput.text?.toLowerCase() || '';\n\t\tconst dateRange = DateRangeFilter.selectedDate;\n\t\t\n\t\t// Filtro por busca\n\t\tif (searchTerm) {\n\t\t\tdata = data.filter(item => \n\t\t\t\titem.descricao?.toLowerCase().includes(searchTerm) ||\n\t\t\t\titem.id?.toString().includes(searchTerm)\n\t\t\t);\n\t\t}\n\t\t\n\t\t// Filtro por data\n\t\tif (dateRange) {\n\t\t\tdata = data.filter(item => \n\t\t\t\tmoment(item.data).isSameOrAfter(dateRange, 'day')\n\t\t\t);\n\t\t}\n\t\t\n\t\treturn data;\n\t},\n\t\n\t// Exporta dados\n\texportData: async (format) => {\n\t\tconst data = Table1.tableData || [];\n\t\tconst filename = `receitas_${moment().format('YYYYMMDD')}`;\n\t\t\n\t\tswitch(format) {\n\t\t\tcase 'excel':\n\t\t\t\t// Prepara dados para Excel\n\t\t\t\tconst excelData = data.map(row => ({\n\t\t\t\t\t'ID': row.id,\n\t\t\t\t\t'Data': moment(row.data).format('DD/MM/YYYY'),\n\t\t\t\t\t'Descrição': row.descricao,\n\t\t\t\t\t'Valor': row.valor\n\t\t\t\t}));\n\t\t\t\tdownloadExcel(excelData, filename);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase 'pdf':\n\t\t\t\t// Gera PDF\n\t\t\t\tconst pdfContent = {\n\t\t\t\t\ttitle: 'Relatório de Receitas',\n\t\t\t\t\tdate: moment().format('DD/MM/YYYY'),\n\t\t\t\t\ttotal: this.formatCurrency(this.calculateMetrics().totalRevenue),\n\t\t\t\t\tdata: data\n\t\t\t\t};\n\t\t\t\tgeneratePDF(pdfContent, filename);\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\tcase 'csv':\n\t\t\t\t// Exporta CSV\n\t\t\t\tconst csv = this.convertToCSV(data);\n\t\t\t\tdownload(csv, `${filename}.csv`, 'text/csv');\n\t\t\t\tbreak;\n\t\t}\n\t\t\n\t\tshowAlert('Exportação realizada com sucesso!', 'success');\n\t},\n\t\n\t// Converte para CSV\n\tconvertToCSV: (data) => {\n\t\tconst headers = ['ID', 'Data', 'Descrição', 'Valor'];\n\t\tconst rows = data.map(row => [\n\t\t\trow.id,\n\t\t\tmoment(row.data).format('DD/MM/YYYY'),\n\t\t\trow.descricao,\n\t\t\trow.valor\n\t\t]);\n\t\t\n\t\treturn [\n\t\t\theaders.join(','),\n\t\t\t...rows.map(row => row.join(','))\n\t\t].join('\\n');\n\t},\n\t\n\t// Gera insights com GPT\n\tgenerateInsights: async () => {\n\t\tconst metrics = this.calculateMetrics();\n\t\tconst recentData = (GetReceitas.data || []).slice(0, 10);\n\t\t\n\t\tconst prompt = `\n\t\t\tAnalise os seguintes dados financeiros e forneça 3 insights importantes:\n\t\t\t- Receita Total: ${this.formatCurrency(metrics.totalRevenue)}\n\t\t\t- Crescimento Mensal: ${metrics.growth}\n\t\t\t- Últimas transações: ${JSON.stringify(recentData)}\n\t\t\t\n\t\t\tFormate a resposta em bullets points concisos.\n\t\t`;\n\t\t\n\t\treturn GPTAnalysis.run({ prompt });\n\t},\n\t\n\t// Salva preferências do usuário\n\tsaveUserPreferences: () => {\n\t\tconst preferences = {\n\t\t\tdarkMode: appsmith.store.darkMode || false,\n\t\t\tlanguage: appsmith.store.language || 'pt-BR',\n\t\t\tdateFormat: appsmith.store.dateFormat || 'DD/MM/YYYY',\n\t\t\tcurrency: appsmith.store.currency || 'BRL',\n\t\t\tlastAccess: new Date().toISOString()\n\t\t};\n\t\t\n\t\tstoreValue('userPreferences', preferences);\n\t\treturn preferences;\n\t},\n\t\n\t// Inicialização do dashboard\n\tinitDashboard: () => {\n\t\t// Carrega preferências\n\t\tconst prefs = appsmith.store.userPreferences || {};\n\t\t\n\t\t// Aplica tema\n\t\tif (prefs.darkMode) {\n\t\t\tthis.toggleDarkMode();\n\t\t}\n\t\t\n\t\t// Carrega dados em cache se disponível\n\t\tconst cachedData = appsmith.store.dashboardCache;\n\t\tif (cachedData && Date.now() - cachedData.timestamp < 300000) {\n\t\t\t// Usa cache se menos de 5 minutos\n\t\t\treturn cachedData.data;\n\t\t}\n\t\t\n\t\t// Atualiza cache\n\t\tGetReceitas.run().then(() => {\n\t\t\tstoreValue('dashboardCache', {\n\t\t\t\tdata: GetReceitas.data,\n\t\t\t\ttimestamp: Date.now()\n\t\t\t});\n\t\t});\n\t}\n}",
    "dynamicBindingPathList": [{
      "key": "body"
    }],
    "variables": [],
    "userPermissions": []
  },
  "publishedCollection": {
    "name": "DashboardUtils",
    "pageId": "Dashboard",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\t// Funções do dashboard...\n}",
    "dynamicBindingPathList": [{
      "key": "body"
    }],
    "variables": [],
    "userPermissions": []
  },
  "id": "Dashboard_DashboardUtils",
  "deleted": false,
  "gitSyncId": "dashboard_utils_001"
}